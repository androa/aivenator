title: Aivenator
editable: true
tags: [generated, yaml]
auto_refresh: 1m
time: ["now-24h", "now"]
timezone: default # valid values are: utc, browser, default

# Render to JSON using https://github.com/K-Phoen/grabana v0.17.0 or newer
# Import into Grafana using UI (remember to select folder)

variables:
  - custom:
      name: env
      default: dev
      values_map:
        dev: dev
        prod: prod
  - datasource:
      name: ds
      type: prometheus
      regex: $env-(gcp|fss|sbs)
      include_all: true
      hide: variable
  - query:
      name: aiven_op
      label: Aiven Operation
      datasource: $env-gcp
      request: "label_values(aivenator_aiven_latency_bucket, operation)"
      include_all: true
      default_all: true
      hide: variable

rows:
  - name: Status in $ds
    repeat_for: ds
    panels:
      - single_stat:
          title: Healthy
          datasource: $ds
          transparent: true
          height: 20px
          span: 2
          color:
            - background
          value_type: current
          value_font_size: 50%
          thresholds: [1,1]
          ranges_to_text:
            - from: 0
              to: 0
              text: Healthy
            - from: 1
              to: 1000000
              text: Unhealthy
          targets:
            - prometheus:
                query: sum(kube_deployment_status_replicas_unavailable{deployment="aivenator", namespace="nais"})
      - single_stat:
          title: Running pods
          datasource: $ds
          transparent: true
          height: 20px
          span: 2
          color:
            - value
          sparkline: bottom
          value_type: current
          thresholds: [1,1]
          colors:
            - "#d44a3a"
            - "rgba(237, 129, 40, 0.89)"
            - "#299c46"
          targets:
            - prometheus:
                query: count(kube_pod_container_status_running{container="aivenator", namespace="nais"})
      - single_stat:
          title: Pending pods
          datasource: $ds
          transparent: true
          height: 20px
          span: 2
          color:
            - value
          sparkline: bottom
          value_type: current
          thresholds: [1,3]
          targets:
            - prometheus:
                query: sum(kube_pod_status_phase{phase="Pending",namespace="nais",pod=~"^aivenator-.+"})
      - single_stat:
          title: "# of restarts"
          datasource: $ds
          transparent: true
          height: 20px
          span: 2
          color:
            - value
          sparkline: bottom
          value_type: current
          thresholds: [1,20]
          targets:
            - prometheus:
                query: sum(kube_pod_container_status_restarts_total{container="aivenator", namespace="nais"})
      - single_stat:
          title: App version
          datasource: $ds
          transparent: true
          height: 20px
          span: 4
          value_type: name
          value_font_size: 50%
          targets:
            - prometheus:
                query: label_replace(kube_pod_container_info{container="aivenator",namespace="nais"}, "version", "$1", "image", ".*:(.*)")
                legend: "{{ version }}"
                instant: true
  - name: Applications
    panels:
      - graph:
          title: AivenApplications processed - $ds
          datasource: $ds
          repeat: ds
          transparent: true
          span: 4
          targets:
            - prometheus:
                query: sum(aivenator_aiven_applications_processed) by (synchronization_state)
                legend: "{{ synchronization_state }}"
      - heatmap:
          # Must be done manually in Grafana after import: Set max datapoints to 25
          title: Processing time - $ds
          datasource: $ds
          repeat: ds
          data_format: time_series_buckets
          hide_zero_buckets: true
          transparent: true
          span: 4
          tooltip:
            show: true
            showhistogram: false
            decimals: 0
          yaxis:
            unit: "dtdurations"
            decimals: 0
          targets:
            - prometheus:
                query: sum(increase(aivenator_aiven_application_processing_time_seconds_bucket[$__interval])) by (le)
                legend: "{{ le }}"
                format: heatmap
  - name: Resource usage
    collapse: true
    panels:
      - graph:
          title: Memory usage - $ds
          datasource: $ds
          repeat: ds
          transparent: true
          span: 4
          targets:
            - prometheus:
                query: avg(kube_pod_container_resource_limits{namespace="nais",container="aivenator",resource="memory"})
                legend: limits
            - prometheus:
                query: avg(kube_pod_container_resource_requests{namespace="nais",container="aivenator",resource="memory"})
                legend: requests
            - prometheus:
                query: sum(container_memory_working_set_bytes{namespace="nais",container="aivenator"}) by (pod)
                legend: "working set {{ pod }}"
            - prometheus:
                query: sum(container_memory_usage_bytes{namespace="nais",container="aivenator"}) by (pod)
                legend: "Resident set size {{ pod }}"
      - graph:
          title: CPU usage - $ds
          datasource: $ds
          repeat: ds
          transparent: true
          span: 4
          targets:
            - prometheus:
                query: avg(kube_pod_container_resource_limits{namespace="nais",container="aivenator",resource="cpu"})
                legend: limits
            - prometheus:
                query: avg(kube_pod_container_resource_requests{namespace="nais",container="aivenator",resource="cpu"})
                legend: requests
            - prometheus:
                query: sum(irate(container_cpu_usage_seconds_total{container="aivenator",namespace="nais"}[2m])) by (pod)
                legend: "{{ pod }}"
  - name: Aiven operations
    collapse: true
    panels:
      - graph:
          title: ServiceUsers created - $ds
          datasource: $ds
          repeat: ds
          transparent: true
          span: 4
          targets:
            - prometheus:
                query: sum(aivenator_service_users_created) by (pool)
                legend: "{{ pool }}"
      - graph:
          title: ServiceUsers deleted - $ds
          datasource: $ds
          repeat: ds
          transparent: true
          span: 4
          targets:
            - prometheus:
                query: sum(aivenator_service_users_deleted) by (pool)
                legend: "{{ pool }}"
  - name: Kubernetes operations
    collapse: true
    panels:
      - graph:
          title: Resources written - $ds
          datasource: $ds
          repeat: ds
          transparent: true
          span: 4
          targets:
            - prometheus:
                query: sum(aivenator_kubernetes_resources_written) by (resource_type)
                legend: "{{ resource_type }}"
      - graph:
          title: Resources deleted - $ds
          datasource: $ds
          repeat: ds
          transparent: true
          span: 4
          targets:
            - prometheus:
                query: sum(aivenator_kubernetes_resources_deleted) by (resource_type)
                legend: "{{ resource_type }}"
      - graph:
          title: Protected Secrets - $ds
          datasource: $ds
          repeat: ds
          transparent: true
          span: 4
          targets:
            - prometheus:
                query: sum(aivenator_secrets_managed{state="protected"}) by (namespace)
                legend: "{{ namespace }}"
      - graph:
          title: Managed Secrets (in use) - $ds
          datasource: $ds
          repeat: ds
          transparent: true
          span: 4
          targets:
            - prometheus:
                query: sum(aivenator_secrets_managed{state="in_use"}) by (namespace)
                legend: "{{ namespace }}"
  - name: Aiven Latency - $aiven_op
    repeat_for: aiven_op
    collapse: true
    panels:
      - heatmap:
          # Must be done manually in Grafana after import: Set max datapoints to 25
          title: $ds
          datasource: $ds
          repeat: ds
          data_format: time_series_buckets
          hide_zero_buckets: true
          transparent: true
          span: 4
          tooltip:
            show: true
            showhistogram: false
            decimals: 0
          yaxis:
            unit: "dtdurations"
            decimals: 0
          targets:
            - prometheus:
                query: sum(increase(aivenator_aiven_latency_bucket{operation="$aiven_op"}[$__interval])) by (le)
                legend: "{{ le }}"
                format: heatmap
