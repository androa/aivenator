// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	aiven "github.com/aiven/aiven-go-client/v2"

	mock "github.com/stretchr/testify/mock"
)

// ACLManager is an autogenerated mock type for the ACLManager type
type ACLManager struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, project, service
func (_m *ACLManager) Get(ctx context.Context, project string, service string) (*aiven.OpenSearchACLResponse, error) {
	ret := _m.Called(ctx, project, service)

	var r0 *aiven.OpenSearchACLResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*aiven.OpenSearchACLResponse, error)); ok {
		return rf(ctx, project, service)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *aiven.OpenSearchACLResponse); ok {
		r0 = rf(ctx, project, service)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiven.OpenSearchACLResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, project, service)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, project, service, req
func (_m *ACLManager) Update(ctx context.Context, project string, service string, req aiven.OpenSearchACLRequest) (*aiven.OpenSearchACLResponse, error) {
	ret := _m.Called(ctx, project, service, req)

	var r0 *aiven.OpenSearchACLResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, aiven.OpenSearchACLRequest) (*aiven.OpenSearchACLResponse, error)); ok {
		return rf(ctx, project, service, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, aiven.OpenSearchACLRequest) *aiven.OpenSearchACLResponse); ok {
		r0 = rf(ctx, project, service, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiven.OpenSearchACLResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, aiven.OpenSearchACLRequest) error); ok {
		r1 = rf(ctx, project, service, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewACLManager creates a new instance of ACLManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewACLManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *ACLManager {
	mock := &ACLManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
