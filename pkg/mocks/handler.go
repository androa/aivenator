// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	aiven_nais_io_v1 "github.com/nais/liberator/pkg/apis/aiven.nais.io/v1"
	corev1 "k8s.io/api/core/v1"

	logrus "github.com/sirupsen/logrus"

	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/apps/v1"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

// Apply provides a mock function with given fields: application, rs, secret, logger
func (_m *Handler) Apply(application *aiven_nais_io_v1.AivenApplication, rs *v1.ReplicaSet, secret *corev1.Secret, logger *logrus.Entry) error {
	ret := _m.Called(application, rs, secret, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(*aiven_nais_io_v1.AivenApplication, *v1.ReplicaSet, *corev1.Secret, *logrus.Entry) error); ok {
		r0 = rf(application, rs, secret, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Cleanup provides a mock function with given fields: secret, logger
func (_m *Handler) Cleanup(secret *corev1.Secret, logger *logrus.Entry) error {
	ret := _m.Called(secret, logger)

	var r0 error
	if rf, ok := ret.Get(0).(func(*corev1.Secret, *logrus.Entry) error); ok {
		r0 = rf(secret, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHandler(t mockConstructorTestingTNewHandler) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
